All questions are optional, though try to answer at least 4. The main goal of this file is to get you thinking critically about your own work, but we will also use these self reflections at the end of the semester when we do our internal review of the course.

ArrayDeque:

Q: Give an example of at least one idea from the staff solution that would have made your solution better (if any).

<<<<<<< HEAD
A: The staff solution used helper methods to navigate through the Deque, which really made the code a lot more concise,
since it abstracted the mathematics of the list away.
=======
A: 
>>>>>>> 14cab644a1ef004f3c39443420437b851cda5685

Q: What's something you felt proud of in your code, if anything?

A:

Q: What's something that was particularly inelegant in your code, if anything?

<<<<<<< HEAD
A: I did not like my resize method; I thought that the arraycopy method wasn't the cleanest, and I probably ran into
a lot of bugs because of nuances of arraycopy. Because I felt that the resize method was not clean, I think some tests
from the autograder did not pass.
=======
A:
>>>>>>> 14cab644a1ef004f3c39443420437b851cda5685

Q: What do you wish you would have known before writing ArrayDeque, if anything?

A:

Q: If you wrote ArrayDeque again, what would you do differently, if anything?

<<<<<<< HEAD
A: I would try to rewrite the resize method without using arraycopy and try to rework how my implementation navigates
through the ArrayDeque to be more similar to the staff solution.
=======
A:
>>>>>>> 14cab644a1ef004f3c39443420437b851cda5685

-----

LinkedListDeque:

Q: Give an example of at least one idea from the staff solution that would have made your solution better (if any).

<<<<<<< HEAD
A: The staff solution does not hard code for edge cases; the implementation works so that the sentinel node is able to
handle these edge cases.

Q: What's something you felt proud of in your code, if anything?

A: I liked how I thought of making the sentinel node its own class; while it was not perfect, I think its implementation
is clear and easy to understand when the sentinel node is its own class.

Q: What's something that was particularly inelegant in your code, if anything?

A: I did have to hard code some edge cases in my addFirst/addLast methods, because my implementation of the Sentinel
node was not able to handle those cases.
=======
A: 

Q: What's something you felt proud of in your code, if anything?

A:

Q: What's something that was particularly inelegant in your code, if anything?

A:
>>>>>>> 14cab644a1ef004f3c39443420437b851cda5685

Q: What do you wish you would have known before writing ArrayDeque, if anything?

A:

Q: If you wrote LinkedListDeque again, what would you do differently, if anything?

<<<<<<< HEAD
A: I would try to make my LinkedListDeque circular, which Sentinel Node as the same class as the regular Node of the
LinkedListDeque.
=======
A:
>>>>>>> 14cab644a1ef004f3c39443420437b851cda5685

-----

Meta:

Q: This is the first time we've tried something like this. Did you like this design review process? Anything we should do differently next time?

A: 